Class 1 -

BDD -   behavioral driven development

          Given
                When
                    And
                        Then

We use BDD scenarios -  to have a clear understanding to other colleagues in the team

To write the BDD scenarios in cucumber  -   we use special type of file

------------------------------------------------------
User story - Search an employee

Search by id

Given  user navigates to HRMS application
When   user enters valid username and password
And    user clicks on login button
Then   user navigates to dashboard page
When   user clicks on PIM option
And    user clicks on search button
When   user enters valid employee name
And    user clicks on Search button
Then   user see employee information is displayed.


Search by name

Given  user navigates to HRMS application
When   user enters valid username and password
And    user clicks on login button
Then   user navigates to dashboard page
When   user clicks on PIM option
And    user clicks on search button
When   user enters valid employee name
And    user clicks on Search button
Then   user see employee information is displayed.



------------------------------------------------------

Class 2 -
+Recap
        BDD -   Behavioral Driven Development
            -   it allows us to write scenarios in gherkin languge

        Feature -   User story

        Scenario    -   Test case - every test case will be considered as scenario in BDD

                    -   Given   -   Pre-requisite/pre-condition
                        When    -   perform actions
                        Then    -   Expected output
                        And     -   Supporting tag

    steps definition -   Cucumber provides the snippets of step definition
                        in step definition, we write the code to perform actions which has been written
                        in the BDD statement.

                        To execute all the feature files from one class, we need runner class

To keep everything organised we need framework
    In framework we have 2 separate branches for
    Java    -   In java, we write all java class
    Non     -   Java    -   In non Java, we write non java part such as features, files etc

Steps package       -   for all step definitions
runners package     -   for all runner classes
config directory    -   for all config files
features directory  -   for all feature files


*************************************************************************************************************

Class 3 -
    Recap - BDD - Behavioral driven development
    because the explanation part was available in diagram

Class 4 -
    Recap -
    Runner class - Cucumber options in runner class
    features - to run the feature file, we provide a path to its repository
    glue - the path of our step definitions package
    dryRun - if we set it to true, it stops actual execution and scans all the steps quickly
    and provide us missing step definition
    monochrome - to remove irrelavant information from the console
    plugin - pretty - to print the steps in the console
    tags - to group the scenario for specific type of execution


POM - page object model - it is a design pattern

it allows QA's to keep object repository -
in simple language, QA's write all the locators of the page in respective class

LoginPage -
DashboardPage -












Class 1 -

BDD -   behavioral driven development

          Given
                When
                    And
                        Then

We use BDD scenarios -  to have a clear understanding to other colleagues in the team

To write the BDD scenarios in cucumber  -   we use special type of file

------------------------------------------------------
User story - Search an employee

Search by id

Given  user navigates to HRMS application
When   user enters valid username and password
And    user clicks on login button
Then   user navigates to dashboard page
When   user clicks on PIM option
And    user clicks on search button
When   user enters valid employee name
And    user clicks on Search button
Then   user see employee information is displayed.


Search by name

Given  user navigates to HRMS application
When   user enters valid username and password
And    user clicks on login button
Then   user navigates to dashboard page
When   user clicks on PIM option
And    user clicks on search button
When   user enters valid employee name
And    user clicks on Search button
Then   user see employee information is displayed.



------------------------------------------------------

Class 2 -
+Recap
        BDD -   Behavioral Driven Development
            -   it allows us to write scenarios in gherkin languge

        Feature -   User story

        Scenario    -   Test case - every test case will be considered as scenario in BDD

                    -   Given   -   Pre-requisite/pre-condition
                        When    -   perform actions
                        Then    -   Expected output
                        And     -   Supporting tag

    steps definition -   Cucumber provides the snippets of step definition
                        in step definition, we write the code to perform actions which has been written
                        in the BDD statement.

                        To execute all the feature files from one class, we need runner class

To keep everything organised we need framework
    In framework we have 2 separate branches for
    Java    -   In java, we write all java class
    Non     -   Java    -   In non Java, we write non java part such as features, files etc

Steps package       -   for all step definitions
runners package     -   for all runner classes
config directory    -   for all config files
features directory  -   for all feature files


*************************************************************************************************************

Class 3 -
    Recap - BDD - Behavioral driven development
    because the explanation part was available in diagram

Class 4 -
    Recap -
    Runner class - Cucumber options in runner class
    features - to run the feature file, we provide a path to its repository
    glue - the path of our step definitions package
    dryRun - if we set it to true, it stops actual execution and scans all the steps quickly
    and provide us missing step definition
    monochrome - to remove irrelevant information from the console
    plugin - pretty - to print the steps in the console
    tags - to group the scenario for specific type of execution


POM - page object model - it is a design pattern

it allows QA's to keep object repository -
in simple language, QA's write all the locators of the page in respective class

LoginPage -
DashboardPage -

Class 5 -
        Recap - runner class - to run our test cases as per the requirement
                                to generate missing steps
                                to print the steps into the console
                                to generate the report

        Page object model - to have organised code and easy to maintain structure
        according to it, we create separate class (page) according to the
        screens available in the application and keep all the locators of this page
        in it

Hooks - we write pre condition and post condition using hooks in cucumber
    @Before - pre condition needs to be mentioned in this
    @After - post condition needs to be mentioned in this

Rules - Hooks class must be created inside steps package

Background - it is applicable only for one feature file
             it means for every feature file background will be different
             steps which are common among all the scenarios of that feature file
             will be taken into background but make sure the flow is not broken.
             if the flow breaks, then we cannot take steps in background after that


Hooks VS background

Hooks are applicable for whole project (for all the feature files)
Background is applicable for one feature file and varies from file to file
First Hooks execute then background execute then scenario execute


class 6 -

Recap   -
    Page object model with page initializer class
    in this initializer class, we initialize all the objects of page classes and call the method in common methods class in openbrowser method


We created a collection point in steps classes  -
    Methods call from common method, locators call from respective page classes using object of that class

    Background - same steps in feature file among all the scenarios should be a part of ini
    Hooks   -   pre-condition and post-condition for the entire project
                here we use 2 hooks - @Before
                                      @After

    Parameterization testing    -
        We can one add employee using feature file -
            'instead of passing hardcoded data, we pass values inside the scenario such as "abc", "xyz" etc'

        to increase the scope of testing, we use data driven testing concept instead of scenario, we use scenario
        outline with examples table

        in examples table, we pass multiple data sets using keys and values

Data table -
    it allows us to pass multiple sets of data without executing background

    outline     -   Examples table  - hooks and background execute every time as per the data set
    Scenario    -   Data table      - hooks and background execute jest one time


working with excel
    .xls    -   HSSF
    .xlsx   -   XSSF


Class 7 -
    Recap - parameters passing for adding the employee
    --  earlier approach was - hardcoded data
    --  passing one set of data from feature file
    --  scenario outline - examples table )for passing multiple data sets)
    --  data table - hooks, background execute one time for multiple data sets
    --  excel - to pass large volume of data
    --

cucumber accepts array of byte for screenshots
when we generate any report, this should be under target folder




